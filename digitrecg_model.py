# -*- coding: utf-8 -*-
"""digitrecg_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxeNXj61DPQe-3lO6fhpZTakZxTXbAoE
"""



import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers, datasets, models
from tensorflow.keras.models import Sequential

# %% [markdown]
## Prepare Dataset

##Code cell <Md-nuU-BQpo3>
# %% [code]
(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()

train_images = train_images.reshape((60000, 28, 28, 1))
test_images = test_images.reshape((10000, 28, 28, 1))

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

print("TRAIN IMAGES: ", train_images.shape)
print("TEST IMAGES: ", test_images.shape)

## Create Model

##Code cell <ABR85VMcQppM>
# %% [code]
num_classes = 10
img_height = 28
img_width = 28

model = Sequential([
    layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.Conv2D(32, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(16, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64, 3, padding='same', activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='sigmoid')
])

## Compile Model

##Code cell <K3OcHt-TQppf>
# %% [code]
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.summary()

## Train Model

##code cell <l4hi0rW_QpqL>
# %% [code]
epochs = 10
history = model.fit(
  train_images,
  train_labels,
  epochs = epochs
)



## Visualize Training Results

##Code cell <ThQIghvNQpqb>
# %% [code]
acc = history.history['accuracy']
loss=history.history['loss']

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, loss, label='Loss')
plt.legend(loc='lower right')
plt.title('Training Accuracy and Loss')

import numpy as np # import numpy for using argmax
import matplotlib.pyplot as plt

# ... your existing code ...

image = (train_images[1]).reshape(1,28,28,1)
# Use predict and argmax instead of predict_classes
model_pred = np.argmax(model.predict(image, verbose=0), axis=-1)
plt.imshow(image.reshape(28,28))
print('Prediction of model: {}'.format(model_pred[0]))

import numpy as np # import numpy for using argmax
import matplotlib.pyplot as plt

image = (train_images[2]).reshape(1,28,28,1)
# Use predict and argmax instead of predict_classes
model_pred = np.argmax(model.predict(image, verbose=0), axis=-1)
plt.imshow(image.reshape(28,28))
print('Prediction of model: {}'.format(model_pred[0]))

import numpy as np # import numpy for using argmax
import matplotlib.pyplot as plt

images = test_images[1:5]
images = images.reshape(images.shape[0], 28, 28)
print ("Test images array shape: {}".format(images.shape))


for i, test_image in enumerate(images, start=1):

    org_image = test_image
    test_image = test_image.reshape(1,28,28,1)
    # Use predict and argmax instead of predict_classes
    prediction = np.argmax(model.predict(test_image, verbose=0), axis=-1)


    print ("Predicted digit: {}".format(prediction[0]))
    plt.subplot(220+i)
    plt.axis('off')
    plt.title("Predicted digit: {}".format(prediction[0]))
    plt.imshow(org_image, cmap=plt.get_cmap('gray'))

plt.show()

model.save("tf-cnn-model.h5")

loaded_model = models.load_model("tf-cnn-model.h5")

import numpy as np
import matplotlib.pyplot as plt

age = (train_images[2]).reshape(1,28,28,1)
# Use predict and argmax instead of predict_classes
model_pred = np.argmax(loaded_model.predict(image, verbose=0), axis=-1)
plt.imshow(image.reshape(28,28))
print('Prediction of model: {}'.format(model_pred[0]))